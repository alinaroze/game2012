package monster;

import inventory.Inventory;

import java.util.Random;

import board.Location;
import character.Player;
import ctrl.Controller;

public class BattleSys {

	private MonsterList list = new MonsterList();
	Controller ctrl;
	Monster monster;
	MonsterEffect effect;

	public BattleSys(Controller c) {
		ctrl = c;
		monster = retrieveMonster(ctrl.getGame().getGmBoard().getPlayerLoc());
		run(ctrl.getGame().getPlayer(), ctrl.getGame().getGmBoard()
				.getPlayerLoc(), ctrl.getGame().getPlayer().getInventory());
		effect = new MonsterEffect();
	}

	public Monster retrieveMonster(Location playerLoc) {
		Random num = new Random();

		if (playerLoc.getSubBoard() == 0) {
			return list.getMonster(list.getBoard1(), num.nextInt(4));
		} else if (playerLoc.getSubBoard() == 1) {
			return list.getMonster(list.getBoard2(), num.nextInt(4));
		} else {
			return list.getMonster(list.getBoard3(), num.nextInt(5));
		}

	}

	public int dieRoll() {
		Random number = new Random();
		return number.nextInt(5) + 1;
	}

	public void run(Player player, Location playerLoc, Inventory items) {

		monster = retrieveMonster(playerLoc);

		int playerRoll = dieRoll();
		int monsterRoll = dieRoll();

		int monsterHpPrev = monster.getHealth();
		int playerHpPrev = player.getHealth();

		int[][] drops = monster.getDrop();

		if (playerRoll > monsterRoll) {
			do {
				playerTurn(player, items);
				monsterTurn(player, playerHpPrev);

			} while (monster.getHealth() != 0 || player.getHealth() != 0);
		} else {
			do {
				monsterTurn(player, playerHpPrev);
				playerTurn(player, items);

			} while (monster.getHealth() != 0 || player.getHealth() != 0);
		}

		playerWins(drops, player);

		monster.setHealth(monsterHpPrev);
		monster.setDrop(drops);

	}

	public void monsterTurn(Player player, int playerHpPrev) {

		int initialDef = monster.getDefense();
		int initialAtk = monster.getAttack();

		int num = dieRoll();
		if (num == 6)
			monster.setAttack(monster.getAttack() * monster.getAttackCrit());

		effect.monsterBeginTurnEffect(monster.getName(), player, monster, num);

		player.takeDamage(monster.getAttack());

		effect.monsterEndTurnEffect(monster.getName(), player, monster, num,
				playerHpPrev);

		monster.setDefense(initialDef);
		monster.setAttack(initialAtk);
	}

	public void playerTurn(Player player, Inventory items) {

	}

	public void playerAttack(Player player) {
		if (monster.getDefense() == 0) {
			monster.setHealth(monster.getHealth() - player.getDamage());
		} else if (monster.getDefense() == 1) {
			monster.setHealth(monster.getHealth() - player.getDamage() + 2);
		} else if (monster.getDefense() == 2) {
			monster.setHealth(monster.getHealth() - 3
					* (player.getDamage() / 4));
		} else if (monster.getDefense() == 3) {
			monster.setHealth(monster.getHealth() - 2
					* (player.getDamage() / 3));
		} else if (monster.getDefense() == 4) {
			monster.setHealth(monster.getHealth() - (player.getDamage() / 2));
		}
	}

	public void playerWins(int[][] drops, Player player) {
		player.addProtons(monster.getProtDrop());
		player.addNeutrons(monster.getNeutDrop());
		player.gainExperience(monster.getXpDrop());

		int[] result = new int[9];

		if (monster.getName().equals("gatherer")) {
			for (int j = 0; j < 9; j++) {
				result[j] = drops[3][j];
			}

			Random num = new Random();
			int index = num.nextInt(8);

			player.setElement(result[index], 1);
			monster.setDrop(drops);

		} else {
			player.setElement(monster.getElemDrop(), monster.getNumElem());

		}

	}

}
